datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]

}

model User {
  id             String          @id @default(dbgenerated("(gen_random_uuid()::TEXT)"))
  name           String?
  email          String          @unique
  phoneNo        String?
  role           Role            @default(STUDENT)
  userStatus     UserStatus      @default(INACTIVE)
  StudentDetails StudentDetails?
  AdminDetails   AdminDetails?
  Notice         Notice[]

  @@map("users")
}

model StudentDetails {
  id                 String  @id @default(uuid())
  basicDetails       User    @relation(fields: [basicDetailsFk], references: [id])
  basicDetailsFk     String  @unique
  registrationNumber Int     @default(0)
  year               Int?
  branch             String?

  @@map("student_detail")
}

model AdminDetails {
  id             String   @id @default(uuid())
  basicDetails   User     @relation(fields: [basicDetailsFk], references: [id])
  basicDetailsFk String   @unique
  Notice         Notice[]

  @@map("admin_detail")
}

model Notice {
  id             String        @id @default(uuid())
  admin          User          @relation(fields: [adminEmailFk], references: [email])
  adminEmailFk   String
  tags           String[]
  isPublished    Boolean       @default(false)
  title          String
  body           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  attachments    Attachments[]
  AdminDetails   AdminDetails? @relation(fields: [adminDetailsId], references: [id])
  adminDetailsId String?

  @@map("notice")
}

model Attachments {
  fileid   String @id @unique
  notice   Notice @relation(fields: [noticeid], references: [id])
  noticeid String
  filename String
  filetype String

  @@map("attachments")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  STUDENT
}

enum UserStatus {
  INACTIVE
  ACTIVE
  INVITED
}
